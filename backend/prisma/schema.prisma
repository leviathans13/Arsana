// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  incomingLetters IncomingLetter[]
  outgoingLetters OutgoingLetter[]

  @@map("users")
}

model IncomingLetter {
  id              String            @id @default(cuid())
  // Fields untuk Surat Masuk
  receivedDate    DateTime          // Tanggal Penerimaan Surat
  letterNumber    String            @unique // Nomor Surat
  letterDate      DateTime?         // Tanggal Surat
  letterNature    LetterNature      @default(BIASA) // Sifat Surat
  subject         String            // Isi Ringkas
  sender          String            // Dari
  recipient       String            // Kepada
  processor       String            // Pengolah
  note            String?           // Ket: Srikandi/manual
  
  // File attachment
  fileName        String?
  filePath        String?
  
  // Invitation specific fields (untuk Undangan Masuk)
  isInvitation    Boolean           @default(false)
  eventDate       DateTime?         // Tanggal Pelaksanaan
  eventTime       String?           // Waktu pelaksanaan
  eventLocation   String?           // Tempat pelaksanaan
  eventNotes      String?           // Catatan pelaksanaan
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  dispositions    Disposition[]

  @@map("incoming_letters")
}

model OutgoingLetter {
  id                    String            @id @default(cuid())
  // Fields untuk Surat Keluar
  createdDate          DateTime          // Tanggal Pembuatan Surat
  letterDate           DateTime          // Tanggal Surat
  securityClass        SecurityClass     @default(BIASA) // Klasifikasi Keamanan
  classificationCode   String?           // Kode Klasifikasi
  serialNumber         Int?              // Nomor Urut
  letterNumber         String            @unique // Nomor Surat (contoh: B/100.3.10/1/2025/16/M)
  letterNature         LetterNature      @default(BIASA) // Sifat Surat
  subject              String            // Isi Ringkas
  executionDate        DateTime?         // Tanggal Pelaksanaan Untuk Undangan
  sender               String            // Dari
  recipient            String            // Kepada
  processor            String            // Pengolah
  note                 String?           // Ket: Srikandi/manual
  
  // File attachment
  fileName             String?
  filePath             String?
  
  // Invitation specific fields
  isInvitation         Boolean           @default(false)
  eventDate            DateTime?
  eventTime            String?
  eventLocation        String?
  eventNotes           String?
  
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  // Relations
  userId               String
  user                 User              @relation(fields: [userId], references: [id])

  @@map("outgoing_letters")
}

model Disposition {
  id                String         @id @default(cuid())
  incomingLetterId  String
  incomingLetter    IncomingLetter @relation(fields: [incomingLetterId], references: [id], onDelete: Cascade)
  dispositionTo     DispositionType
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("dispositions")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  userId    String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

enum Role {
  ADMIN
  STAFF
}

enum LetterNature {
  BIASA         // Biasa
  TERBATAS      // Terbatas
  RAHASIA       // Rahasia
  SANGAT_RAHASIA // Sangat Rahasia
  PENTING       // Penting (untuk surat keluar)
}

enum SecurityClass {
  BIASA         // Klasifikasi Keamanan: Biasa
}

enum DispositionType {
  UMPEG         // Umpeg
  PERENCANAAN   // Perencanaan
  KAUR_KEUANGAN // Kaur Keuangan
  KABID         // Kabid
  BIDANG1       // Bidang 1
  BIDANG2       // Bidang 2
  BIDANG3       // Bidang 3
  BIDANG4       // Bidang 4
  BIDANG5       // Bidang 5
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}